--
title: "Analysis"
editor: source
editor_options:
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: false
execute:
  cache: true
---

## Packages

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(ggdist)
library(dtwclust)
library(foreach)
library(doFuture)
library(data.table)
library(dtplyr)
library(dplyr, warn.conflicts = FALSE)
library(progressr)
library(profvis)

plan(multisession, workers = 4)
options(future.globals.maxSize = 9999 * 1024^2)
handlers(global = TRUE)
handlers("progress")
```

## Utility functions
```{r}
p_print <- function(df, n = 30L, mode = "head") {
    n <- pmin(n, nrow(df))
    if (mode == "head") {
        return(View(df[1:n, ]))
    } else if (mode == "tail") {
        return(View(df[(nrow(df) - n):nrow(df), ]))
    }
}
```

## Data Preparation
```{r}
#| code-fold: false

df <- rbind(
    fread("data/data_hep1.csv"),
    fread("data/data_hep2.csv"),
    fread("data/data_hep3.csv"),
    fread("data/data_hep4.csv"),
    fread("data/data_hep5.csv"),
    #  fread("data/data_hep6.csv"),
    fread("data/data_hep7.csv"),
    fread("data/data_hep8.csv"),
    fread("data/data_hep9.csv"),
    fread("data/data_hep10.csv"),
    fread("data/data_hep11.csv")
)

dfsub <- fread("https://raw.githubusercontent.com/RealityBending/InteroceptionPrimals/main/data/data_participants.csv") |>
    rename(Participant = "participant_id") |>
    select(-matches("\\d"))

dffeat <- fread("data/data_features.csv") |>
    merge(select(dfsub, Participant, starts_with("MAIA_"), starts_with("IAS"), starts_with("HRV"), starts_with("HCT")),
        by = "Participant"
    )

dffeat <- df |>
    merge(select(dfsub, Participant, starts_with("MAIA_"), starts_with("IAS"), starts_with("HRV"), starts_with("HCT")),
        by = "Participant"
    )

rm(dfsub, df)
```

## Correlations

### Synchronous version
```{r}

window_size <- seq(from = 0.1, to = 1.0, by = 0.1)

unique_condition <- unique(dffeat$Condition)
unique_time <- unique(dffeat$time)

steps <- length(unique_time) * length(unique_condition) * length(window_size)

corr_test <- function() {
    count <- 1
    templist <- vector("list", steps)

    for (w in window_size) {
        print(w)
        for (c in unique_condition) {
            print(c)
            for (i in unique_time) {
                windowed <- dffeat |>
                    lazy_dt() |>
                    group_by(Participant) |> # I don't know why we need to group by Pp, but the correlation returns NA if we don't?
                    filter((time > (i - w) & time < (i + w)) & Condition == c) |>
                    mutate(AF7_Mean = mean(AF7), AF8_Mean = mean(AF8)) |>
                    ungroup() |> # Correlation also returns NA if we don't ungroup
                    as.data.table()

                r <- correlation(
                    select(windowed, AF7_Mean, AF8_Mean), # Correlate the AF7/8 means
                    select(windowed, starts_with("MAIA"), starts_with("IAS"), starts_with("HRV"), starts_with("HCT")), # With the interoceptive measures
                    p_adjust = "none"
                ) |>
                    mutate(time = i, condition = c, window_size = w)

                windowed <- NULL

                templist[[count]] <- r

                r <- NULL

                # See what iteration we're on because this is slow af
                print(paste(count, steps, sep = "/"))
                count <- count + 1
            }
        }
    }
    rbindlist(templist)
}
# p_print(corr_test())

output <- corr_test()
# p_print(output, n=300)

profvis(output <- corr_test(), interval = 0.005)
```

### Parallel version
```{r}

window_size <- seq(from = 0.1, to = 1.0, by = 0.1)

output <- data.table()

unique_condition <- unique(dffeat$Condition)
unique_time <- unique(dffeat$time)

steps <- (length(unique_time) * length(unique_condition) * length(window_size))

corr_calc <- function() {
    p <- progressor(steps = steps)
    templist <- vector("list", steps)

    templist <- foreach(w = window_size, .combine = c, .inorder = FALSE) %dofuture% {
        count <- 1

        for (c in unique_condition) {
            for (i in unique_time) {
                windowed <- dffeat |>
                    lazy_dt() |>
                    group_by(Participant) |> # I don't know why we need to group by Pp, but the correlation returns NA if we don't?
                    filter((time > (i - w) & time < (i + w)) & Condition == c) |>
                    mutate(AF7_Mean = mean(AF7), AF8_Mean = mean(AF8)) |>
                    ungroup() |> # Correlation also returns NA if we don't ungroup
                    as.data.table()

                r <- correlation(
                    select(windowed, AF7_Mean, AF8_Mean), # Correlate the AF7/8 means
                    select(windowed, starts_with("MAIA"), starts_with("IAS"), starts_with("HRV"), starts_with("HCT")), # With the interoceptive measures
                    p_adjust = "none"
                ) |>
                    mutate(time = i, condition = c, window_size = w)

                windowed <- NULL
                templist[[count]] <- r

                r <- NULL
                gc()

                count <- count + 1
                p(message = paste(w, c, i, sep = ", "))
            }
        }

        templist
    }
    output <- rbindlist(output)
}

with_progress(output2 <- corr_calc())

p_print(output, n = 300)
```

```{r}
output <- fread("correlations2.csv")
```

```{r}
ggplot(output, aes(x = time, y = r)) +
    geom_hline(yintercept = 0) +
    geom_vline(xintercept = 0, color = "grey") +
    geom_line(aes(color = condition), linewidth = 1) +
    scale_x_continuous(breaks = c(-0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8)) +
    facet_grid(Parameter2 ~ Parameter1, switch = "y") +
    theme_minimal()
```