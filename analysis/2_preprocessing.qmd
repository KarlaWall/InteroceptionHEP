---
title: "Analysis"
editor: source
editor_options: 
  chunk_output_type: console
format:
  html:
    code-fold: true
    self-contained: true
---

## Data Preparation

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(easystats)
library(patchwork)
library(ggside)
library(dtwclust)
```


```{r}
#| code-fold: false

df <- rbind(
  read.csv("../data/data_hep1.csv"),
  read.csv("../data/data_hep2.csv"),
  read.csv("../data/data_hep3.csv"),
  read.csv("../data/data_hep4.csv")) |>
  mutate(AF7 = as.numeric(standardize(AF7)),
         AF8 = as.numeric(standardize(AF8)),
         .by = c("Participant", "Condition", "epoch")) 

df |>  
  summarize(n = length(unique(epoch)), .by=c("Participant", "Condition")) |> 
  gt::gt() |> 
  gt::opt_interactive()

ecg <- summarize(df, ECG = median(ECG), RSP = median(RSP), .by="time") |> 
  mutate(ECG = standardize(ECG))
```


## Exclusion


```{r}
#| code-fold: false

df <- df |> 
  mutate(Exclude = case_when(
    Participant == "sub-06" ~ TRUE,
    Participant == "sub-14" ~ TRUE,
    .default = FALSE
  )) 

  
df |>  
  filter(Exclude == TRUE) |> 
  summarize(ggdist::mean_qi(AF7, .width=0.2), .by=c("Participant", "Condition", "time")) |>
  mutate(Sensor = "AF7") |> 
  rbind(
    filter(df, Exclude == TRUE) |>  
      summarize(ggdist::mean_qi(AF8, .width=0.2), .by=c("Participant", "Condition", "time")) |>
      mutate(Sensor = "AF8")
  ) |>
  ggplot(aes(x=time)) +
  geom_vline(xintercept=0) +
  # geom_ribbon(aes(ymin=ymin, ymax=ymax, fill=Condition), alpha=1/6) +
  geom_line(aes(y=y, color=Condition, linetype=Sensor)) +
  # geom_line(aes(color=Condition, group=epoch)) +
  facet_wrap(~Participant, scales="free_y") +
  theme_minimal()

df <- df |> 
  filter(Exclude == FALSE) |> 
  select(-Exclude) 
```


## Participant-Level Clustering

### Naive Averaging

```{r}
#| code-fold: false
#| fig-width: 12
#| fig-height: 14

dat <- df |>  
  summarize(ggdist::mean_qi(AF7, .width=0.2), .by=c("Participant", "Condition", "time")) |>
  mutate(Sensor = "AF7") |> 
  rbind(
    df |>  
      summarize(ggdist::mean_qi(AF8, .width=0.2), .by=c("Participant", "Condition", "time")) |>
      mutate(Sensor = "AF8")
  )

dat |>
  ggplot(aes(x=time)) +
  geom_vline(xintercept=0) +
  geom_vline(xintercept=c(-0.14, 0.1), color="grey") +
  # geom_ribbon(aes(ymin=ymin, ymax=ymax, fill=Condition), alpha=1/6) +
  geom_line(aes(y=y, color=Condition, linetype=Sensor)) +
  # geom_line(aes(color=Condition, group=epoch)) +
  facet_wrap(~Participant, scales="free_y", ncol=4) +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.title.y = element_blank())
```

### Clustering

```{r}
#| code-fold: false
#| fig-width: 12
#| fig-height: 12


make_clusters <- function(df, sensor="AF8", condition="RestingState") {
  df$Sensor <- df[[sensor]]
  data <- df |> 
    filter(Condition == condition) |>
    summarize(Sensor = mean(Sensor), .by=c("Participant",  "time")) |>
    pivot_wider(names_from = c("Participant"), values_from = "Sensor") |> 
    select(-time) |> 
    as.list()
  
  pc <- dtwclust::tsclust(
    data, 
    type = "partition",  # hierarchical, partition
    distance = "sbd",  # LB_Improved (lbi), LB_Keogh (lbk)
    centroid = "pam",  # shape, pam, sdtw_cent
    trace=FALSE,  # Verbose
    # control = partitional_control(nrep = 1),
    k = 2:4)
  
  fit <- as.data.frame(sapply(pc, cvi)) |> 
    setNames(paste0("k", 2:4)) |> 
    mutate(Index = names(cvi(pc[[1]]))) |>
    pivot_longer(-Index, names_to="k", values_to="Score") |> 
    mutate(k = as.numeric(str_remove(k, "k")),
           Sensor = sensor,
           Condition=condition)
  
  dataplot <- as.data.frame(do.call(cbind, pc[[1]]@centroids)) |> 
    setNames(paste0("Cluster", 1:length(pc[[1]]@centroids))) |>
    mutate(time = unique(df$time)) |> 
    pivot_longer(-time, names_to = "Cluster", values_to = "Value") |> 
    mutate(Sensor = sensor, Condition=condition)
  
  
  dfsub <- data.frame(
    Participant = names(data),
    Cluster = predict(pc[[1]]),
    Sensor = sensor,
    Condition = condition
  )
  
  return(list(pc=pc, fit=fit, dataplot=dataplot, dfsub=dfsub))
}

out1 <- make_clusters(df, sensor="AF8", condition="RestingState")
out2 <- make_clusters(df, sensor="AF7", condition="RestingState")
out3 <- make_clusters(df, sensor="AF8", condition="HCT")
out4 <- make_clusters(df, sensor="AF7", condition="HCT")


# Visualize centroids
dat <- rbind(out1$dataplot, out2$dataplot, out3$dataplot, out4$dataplot) 
dat |> 
  ggplot(aes(x=time, y=Value)) +
  geom_vline(xintercept=c(-0.14, 0.1), color="grey") +
  geom_vline(xintercept=0) +
  geom_line(data=rescale(ecg, select="ECG", to=c(min(dat$dataplot$Value), max(dat$dataplot$Value))), 
            aes(y=ECG), color="red") +
  geom_line(aes(color=Cluster), linewidth=2) +
  theme_minimal() +
  facet_grid(Sensor~Condition)
```

### Labelling


```{r}
#| code-fold: false

dfsub <- rbind(out1$dfsub, out2$dfsub, out3$dfsub, out4$dfsub)
  

# m <- glmmTMB::glmmTMB(Cluster1 ~ Condition + Sensor + (1|Participant), 
#                       data=mutate(dfsub, Cluster1 = ifelse(Cluster == 1, 1, 0)), 
#                       family=binomial) 
# parameters::parameters(m)
# 
# plot(estimate_means(m))

dfsub |> 
  mutate(Cluster = paste0("k", Cluster)) |> 
  pivot_wider(names_from = c("Condition", "Sensor"), values_from = "Cluster") |> 
  datawizard::data_addprefix("HEP_Cluster_", select=-Participant) |> 
  write.csv("../data/data_clustering.csv", row.names=FALSE)
```

### Correlates

```{r}
#| code-fold: false

dfsub <- merge(
  read.csv("../data/data_clustering.csv"), 
  read.csv("https://raw.githubusercontent.com/RealityBending/PrimalsInteroception/main/data/data_participants.csv") |> 
    rename(Participant="participant_id"),
  by="Participant") 

make_models <- function(outcome="MAIA_Noticing") {
  dat <- rbind(
    parameters(lm(as.formula(paste(outcome, "~ HEP_Cluster_HCT_AF8")), data=dfsub))[2, ],
    parameters(lm(as.formula(paste(outcome, "~ HEP_Cluster_HCT_AF7")), data=dfsub))[2, ],
    parameters(lm(as.formula(paste(outcome, "~ HEP_Cluster_RestingState_AF8")), data=dfsub))[2, ],
    parameters(lm(as.formula(paste(outcome, "~ HEP_Cluster_RestingState_AF7")), data=dfsub))[2, ]
    ) |> 
    mutate(Outcome = outcome)
}

# names(select(dfsub, !matches("\\d")))

rbind(
  make_models("MAIA_Noticing"),
  make_models("MAIA_NotDistracting"),
  make_models("MAIA_NotWorrying"),
  make_models("MAIA_AttentionRegulation"),
  make_models("MAIA_EmotionalAwareness"),
  make_models("MAIA_SelfRegulation"),
  make_models("MAIA_BodyListening"),
  make_models("MAIA_Trusting")
) |> 
  filter(p < .2) |> 
  arrange(p) |> 
  display()
```

<!-- ## Trial-Level Clustering -->


<!-- ```{r} -->
<!-- #| code-fold: false -->

<!-- data <- df |>  -->
<!--   select(Participant, Condition, epoch, time, AF7) |> -->
<!--   pivot_wider(names_from = c("Participant", "epoch", "Condition"), values_from = "AF7") |>  -->
<!--   select(-time) |>  -->
<!--   as.list() -->

<!-- pc <- dtwclust::tsclust( -->
<!--   data,  -->
<!--   type = "partitional",  -->
<!--   distance = "sbd",  # LB_Improved (lbi), LB_Keogh (lbk) -->
<!--   centroid = "shape", -->
<!--   trace=TRUE, -->
<!--   k = 2) -->

<!-- as.data.frame(do.call(cbind, pc@centroids)) |>  -->
<!--   setNames(paste0("Cluster", 1:length(pc@centroids))) |> -->
<!--   mutate(time = unique(df$time)) |>  -->
<!--   pivot_longer(-time, names_to = "Cluster", values_to = "Value") |> -->
<!--   ggplot(aes(x=time, y=Value, color=Cluster)) + -->
<!--   geom_line()  -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| code-fold: false -->

<!-- df$Cluster <- rep(predict(pc), each=length(unique(df$time))) -->

<!-- prop <- df |>  -->
<!--   filter(time == min(time)) |>  -->
<!--   mutate(n_epochs = length(unique(epoch)), .by=c("Participant", "Condition")) |> -->
<!--   summarize(n = n() / max(n_epochs), .by=c("Participant", "Condition", "Cluster"))  -->

<!-- glm(n ~ Condition, data=filter(prop, Cluster==1), family="binomial") |>  -->
<!--   parameters::parameters() -->

<!-- prop |>  -->
<!--   filter(Cluster==1) |>  -->
<!--   mutate(Participant = fct_reorder(Participant, n)) |> -->
<!--   ggplot(aes(y=Participant, x=n)) + -->
<!--   geom_bar(stat="identity") + -->
<!--   geom_vline(xintercept=0.5, linetype="dashed", color="red") + -->
<!--   facet_grid(~Condition) + -->
<!--   coord_cartesian(xlim=c(0, 1)) -->
<!-- ``` -->




<!-- ## Heartbeat Evoked Potential (HEP) -->



<!-- ```{r} -->
<!-- #| code-fold: true -->
<!-- #| label: fig-RS_HEP -->
<!-- #| fig-cap: "Heartbeat Evoked Potential (HEP) for each participant during the resting state, overlayed over average ECG trace and PPG (infrared sensor on the forehead)." -->

<!-- df <- read.csv("../data/data_hep.csv") |> -->
<!--     # filter(participant_id %in% c("sub-07")) |> -->
<!--   pivot_longer(c("AF7", "AF8"), names_to = "Channel", values_to = "EEG") |>  -->
<!--   mutate(time = time * 1000) |> -->
<!--   group_by(Condition, participant_id, Channel) |>  -->
<!--   datawizard::standardize(select = c("EEG", "PPG_Muse", "ECG")) |> -->
<!--   ungroup()  -->

<!-- av_eeg <- df |> -->
<!--     select(-participant_id) |> -->
<!--     group_by(Cluster, Condition, Channel, time) |> -->
<!--     summarise_all(list(Mean = mean,  -->
<!--                        CI_low = \(x) as.numeric(bayestestR::eti(x))[2], -->
<!--                        CI_high = \(x) as.numeric(bayestestR::eti(x))[3])) -->

<!-- av_ecg <- df |> -->
<!--     select(-participant_id, -Channel, -Cluster) |> -->
<!--     group_by(Condition, time) |> -->
<!--     summarise_all(mean)  |> -->
<!--     datawizard::rescale(select = c("ECG", "PPG_Muse"), to = c(-3, 3)) -->

<!-- df |> -->
<!--    # filter(color == "A") |>  -->
<!--     ggplot(aes(x = time, y = EEG)) + -->
<!--     geom_vline(xintercept = 0, linetype = "dashed") + -->
<!--     geom_hline(yintercept = 0) + -->
<!--     geom_ribbon(aes(xmin = 200, xmax = 400), fill = "#FFECB3") + -->
<!--     geom_line(data = av_ecg, aes(y = PPG_Muse), color = "#9C27B0", linewidth = 2, alpha=2/3) + -->
<!--     geom_line(data = av_ecg, aes(y = ECG), color = "#F44336", linewidth = 2, alpha=2/3) + -->
<!--     geom_line(aes(group = interaction(participant_id, Cluster, Channel), color = Cluster, linetype = Channel), alpha = 0.6, linewidth=0.1) + -->
<!--     geom_ribbon(data=av_eeg, aes(group=interaction(Channel, Cluster), y=EEG_Mean, ymin=EEG_CI_low, ymax=EEG_CI_high, fill = Cluster), alpha=0.1) + -->
<!--     geom_line(data = av_eeg, aes(y=EEG_Mean, color = Cluster, linetype = Channel), linewidth = 1) + -->
<!--     scale_x_continuous(breaks = c(-200, 0, 200, 400, 600, 800), expand = c(0, 0)) + -->
<!--     scale_y_continuous(expand = c(0.01, 0.01)) + -->
<!--     scale_color_manual(values = c("N100" = "#FF9800", "P200" = "#2196F3")) + -->
<!--     scale_fill_manual(values = c("N100" = "#FF9800", "P200" = "#2196F3")) + -->
<!--     scale_linetype_manual(values = c("AF7" = "dotted", "AF8" = "solid")) + -->
<!--     # coord_cartesian(ylim = c(-2, 2)) + -->
<!--     labs(x = "Time relative to ECG R-peak (ms)", y = "EEG Amplitude (AF8)") + -->
<!--     theme_modern() + -->
<!--     theme( -->
<!--         panel.grid.major.y = element_blank(), -->
<!--         panel.grid.minor.y = element_blank() -->
<!--     ) + -->
<!--     facet_grid(~Condition) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| include = FALSE -->

<!-- # Save cleaned data -->
<!-- write.csv(df, "../data/data_clean.csv") -->
<!-- ``` -->
